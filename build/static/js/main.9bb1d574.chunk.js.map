{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","isRed","cases","active","total","props","Card","onClick","className","CardContent","Typography","color","classname","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapcenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","initialData","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bb1d574.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\"\r\nimport './InfoBox.css'\r\n\r\nfunction InfoBox({ title, isRed, cases, active, total, ...props }) {\r\n    return (\r\n        <Card \r\n        onClick = {props.onClick}\r\n        className = {`infoBox ${active && \"infoBox--selected\"} ${\r\n            isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                <Typography className = \"inforBox__title\" color = \"textSecondary\">{title}</Typography>\r\n                <h2 classname = {`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`} color = \"textSecondary\">{cases}</h2>\r\n                <Typography className = \"infoBox__total\" color = \"textSecondary\">{total} Total</Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 600,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 1000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType  =  \"cases\" }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { Card, MenuItem, FormControl, Select, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData,   setTableData] = useState([]);\n  const [mapCenter, setMapcenter] = useState({lat: 34.800746, lng: -40.4796 })\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([])\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  // useEffect(() => {\n  //   fetch(\"​https://disease.sh/v3/covid-19/all\")\n  //   .then((response) => response.json())\n  //   .then((data) => {\n  //     console.log(data)\n  //     setCountryInfo(data);\n  //   });\n  // }, []);\n\n  useEffect(() => {\n    const initialData = async () => {\n      await fetch ('https://disease.sh/v3/covid-19/all')\n      .then((response) => response.json())\n      .then ((data) => {\n        setCountryInfo(data);\n      });\n    }\n    initialData();\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch (\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n         const countries = data.map((country) => (\n           {\n             name: country.country,\n             value: country.countryInfo.iso2\n           }\n         ));\n         const sortedData = sortData(data);\n         setTableData(sortedData);\n         setMapCountries(data);\n         setCountries(countries);\n      })\n    }    \n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    console.log(\"jiojoj ?????\", countryCode)\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : \n    `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    \n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      setMapcenter([data.countryInfo.lat, data.countryInfo.long])\n      setMapZoom(4);\n    })\n  }\n  return (\n    <div className=\"App\">\n      <div className = \"app__left\">\n      <div className = \"app__header\">\n      <h1>COVID-19 TRACKER </h1>\n      <FormControl className = \"app__dropdown\">\n        <Select\n          variant = \"outlined\"\n          value = {country}\n          onChange = {onCountryChange}\n        >  \n        <MenuItem value = \"worldwide\"> WorldWide </MenuItem>   \n          {\n            countries.map((country) => (\n            <MenuItem value = {country.value}> {country.name} </MenuItem>\n            ))\n          }\n          </Select>\n        </FormControl>\n      </div>\n\n      <div className = \"app__stats\">\n          <InfoBox\n          isRed \n          active = {casesType == \"cases\"}\n          onClick = {(e) => setCasesType('cases')}\n          title = \"Coronavirus Cases\" cases = {prettyPrintStat(countryInfo.todayCases)} total = {prettyPrintStat(countryInfo.cases)}/>\n          \n          <InfoBox \n          active = {casesType == \"recovered\"}\n          onClick = {(e) => setCasesType('recovered')}\n          title = \"Recovered\" cases = {prettyPrintStat(countryInfo.todayRecovered)} total = {prettyPrintStat(countryInfo.recovered)}/>\n          \n          <InfoBox \n          isRed\n          active = {casesType == \"deaths\"}\n          onClick = {(e) => setCasesType('deaths')}\n          title = \"Deaths\" cases = {prettyPrintStat(countryInfo.todayDeaths)} total = {prettyPrintStat(countryInfo.deaths)}/>\n      </div>\n       <Map \n        casesType = {casesType}\n        countries = {mapCountries}\n        center = {mapCenter}\n        zoom = {mapZoom}\n       />\n      </div>\n          \n      <Card className = \"app__right\">\n          <CardContent>\n            <h3>Live cases by country</h3>\n            <Table countries = {tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType = {casesType} />\n\n          </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}